==  Build VisIt v2.9.0 with bells & whistles  ==
# set variables to build UINTAH:
export PAR_COMPILER=/usr/lib64/mpi/gcc/openmpi/bin/mpicc
export PAR_COMPILER_CXX=/usr/lib64/mpi/gcc/openmpi/bin/mpicxx
export PAR_INCLUDE="-I/usr/lib64/mpi/gcc/openmpi/include/"

# also set variables for compiling ICE-T
# We have no guesses as to where MPI might reside. Look for it...
# To configure parallel VisIt you must satisfy one of the following conditions:
#    The PAR_COMPILER env var provides a path to a mpi compiler wrapper (such as mpicc).
#    A mpi compiler wrapper (such as mpicc) to exists in your path.
#    The PAR_INCLUDE & PAR_LIBS env vars provide necessary CXX & LDFLAGS to use mpi.
# To build ICE-T the PAR_INCLUDE env var must provide the include path to your mpi headers.

# These build options have worked at least once ;-)
./build_visit2_9_0.sh --parallel --required --slivr --static --visit --system-cmake --mesa --python --qt5 --vtk --cgns --h5part --hdf4 --hdf5 --icet --boost --boxlib --ccmio --fastbit --gdal --itaps --nektar++ --netcdf --silo  --silex --szip --uintah --visus --xdmf


./build_visit2_9_0.sh --parallel --required --static --visit

./build_visit2_9_0.sh --parallel --required --slivr --static --visit --mesa --python --qt5 --vtk --cgns --h5part --hdf4 --hdf5 --icet --boost --boxlib --ccmio --fastbit --gdal --itaps --nektar++ --netcdf --silo --szip --uintah --visus --xdmf






#######################################################################
## Below is just the output of "help" for reference of VisIt options ##
#######################################################################

danny@Weathertop:~/workspace/VisIt> ./build_visit2_9_0.sh -h
Processing bsd license.
Usage: ./build_visit2_9_0.sh [options]
A download attempt will be made for all files which do not exist.

BOOLEAN FLAGS
        These are used to enable or disable specific functionality.  They do not take option values.

--dry-run       Dry run of the presented options [false]
--build-mode    VisIt build mode (Debug or Release) []
--console       Do not use dialog ('graphical') interface [!]
--dbio-only     Disables EVERYTHING but I/O. []
--engine-only   Only build the compute engine. []
--debug         Enable debugging for this script [false]
--download-only Only download the specified packages [false]
--flags-debug   Add '-g' to C[XX]FLAGS [false]
--group         Group name of installed libraries []
-h              Display this help message. [false]
--help          Display this help message. [false]
--java          Build with the Java client library []
--no-hostconf   Do not create host.conf file. []
--parallel      Enable parallel build, display MPI prompt []
--prefix        The directory to which VisIt should be installed once it is built []
--print-vars    Display user settable environment variables [false]
--server-components-only Only build VisIt's server components (mdserver,vcl,engine). []
--slivr         Build with SLIVR shader support []
--paradis       Build with the paraDIS client library []
--static        Build using static linking []
--stdout        Write build log to stdout [build_visit2_9_0.sh_log]
--xdb           Enable FieldView XDB plugin. []
--required      All required libraries []
--optional      All optional libraries []
--no-thirdparty Do not build required 3rd party libraries []
--all-io        Build all available I/O libraries []
--dbio-only     Disables EVERYTHING but I/O. []
--nonio         Build non I/O libraries []
--advanced      Must be manually downloaded []
--visit         Build VisIt []
--cmake         Build CMake [built by default unless --no-thirdparty flag is used]
--system-cmake  Use CMake [Use system cmake]
--alt-cmake-dir Use CMake [Use cmake from alternative directory]
                NOTE: not available for download from web
--mesa          Build Mesa []
--python        Build Python [built by default unless --no-thirdparty flag is used]
--system-python Use System Python [Used unless --no-thirdparty flag is used]
--qt            Build Qt [built by default unless --no-thirdparty flag is used]
--qt5           Build Qt5 [built by default unless --no-thirdparty flag is used]
--system-qt     Use System Qt [Used by default unless --no-thirdparty flag is used]
--alt-qt-dir    Use Qt from alternative directory [Used by default unless --no-thirdparty flag is used]
                NOTE: not available for download from web
--vtk           Build VTK [built by default unless --no-thirdparty flag is used]
--adios         Build ADIOS []
--advio         Build AdvIO []
--boost         Build BOOST []
--boxlib        Build Boxlib []
--ccmio         Build Star-CD support []
--cfitsio       Build CFITSIO []
--cgns          Build CGNS []
--eavl          Build eavl support []
--fastbit       Build FastBit []
--gdal          Build GDAL []
--h5part        Build H5Part []
--hdf4          Build HDF4 []
--hdf5          Build HDF5 []
--icet          Build Ice-T (parallel rendering lib) []
--no-icet       Ice-T is automatically built with --enable-parallel.  Prevent it from being built []
--itaps         Build ITAPS []
--manta         Build Manta []
--mfem          Build mfem support []
                NOTE: not available for download from web
--mili          Build Mili []
--mpich         Build MPICH support []
--mxml          Build Mxml []
--nektar++      Build NEKTAR_PLUS_PLUS []
                NOTE: not available for download from web
--netcdf        Build NetCDF []
--pyside        Build PySide []
--silo          Build Silo support []
--silex         Enable silex when building Silo []
--szip          Build with SZIP []
--tcmalloc      Build tcmalloc from Google's perftools []
--uintah        Build UINTAH []
--alt-uintah-dir Use Uintah [Use Uintah from alternative directory]
--visus         Build ViSUS support []
--alt-visus-dir Use ViSUS [Use ViSUS from alternative directory]
                NOTE: not available for download from web
--xdmf          Build Xdmf []
--zlib          Build ZLIB support []

OPTIONS
These values all take a special value.  If given, they require an associated value to be provided as well.

--installation-build-dir 
        Specify the directory visit will use for building [output-filename]
--write-unified-file 
        Write single unified build_visit file [output-filename]
--arch <architecture> Set architecture []
             This variable is used in constructing the 3rd party
             library path; usually set to something like
             'linux_gcc-3.4.6' or 'Darwin_gcc-4.0.1'
--cflag     Append a flag to CFLAGS []
--cxxflag   Append a flag to CXXFLAGS []
--cflags    Explicitly set CFLAGS []
--cxxflags  Explicitly set CXXFLAGS []
--cc        Explicitly set C_COMPILER []
--cxx       Explicitly set CXX_COMPILER []
--makeflags <flags> Flags to 'make' []
--svn <Obtain VisIt source code and third party libraries from the SVN server> 
            [svn co /tags/2.9.0/src]
--svn-anonymous <Obtain VisIt source code and third party libraries using the anonymous SVN mirror.> 
            [svn co /tags/2.9.0/src]
--svn-revision <revision> Specify the SVN revision of the VisIt source code and third party libraries to download.  Used in conjunction with --svn or --svn-anonymous.
--tarball <file> tarball to extract VisIt from []
--thirdparty-path </path/to/directory> 
             Specify the root directory name under which the 3rd party
             libraries have been installed.  If defined, it would typically
             mean the 3rd party libraries are pre-built and are installed
             somewhere like /usr/gapps/visit. []
--version <version> The VisIt version to build [2.9.0]



